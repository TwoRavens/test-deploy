---
#   7/30/2019 config
#   https://2ravens.org
#
#   10/15/2019 - workon resources
#     - init: remove resources
#
apiVersion: v1
kind: Service
metadata:
  name: tworavens-service{{ serviceNameSuffix}}
  labels:
    app: ta3{{ serviceNameSuffix}}
    kubernetes.io/cluster-service: 'true'
    kubernetes.io/name: monitoring-raven
spec:
  type: LoadBalancer
  loadBalancerIP: {{ loadBalancerIP }}
  #  loadBalancerIP: 104.197.235.238  # 2ravens.org
  selector:
    app: ta3{{ serviceNameSuffix}}
  ports:
    - name: http
      port: {{ externalPort }}
      protocol: TCP
      targetPort: 80
---
apiVersion: v1
kind: Pod
metadata:
  name: tworavensweb{{ serviceNameSuffix}}
  labels:
    app: ta3{{ serviceNameSuffix}}
spec:
  restartPolicy: Never
  containers:
  # -------------------------
  # 1 of 7: TA2
  # -------------------------
  - name: ta2-container
    # {{ ta2_image_comment }}
    image: {{ ta2_image }}
    imagePullPolicy: {{ pull_policy_ta2 }}
    resources:
      requests:
         memory: 20000Mi
         cpu: 1500m
      limits:
         memory: 25000Mi
         cpu: 2000m
    ports:
      - containerPort: 45042
        protocol: TCP
    volumeMounts:
      # ----------------------------------
      # shared between containers
      # ----------------------------------
      - mountPath: "/ravens_volume"
        name: "ravens-volume"
        readOnly: false
      # ----------------------
      # D3M config volume mounts
      # ----------------------
      - name: input-data
        mountPath: /input
        readOnly: true
      - name: output-data
        mountPath: /output
        readOnly: false
      - name: static-data
        mountPath: /static
        readOnly: true
      # ----------------------
      # END: D3M config volume mounts
      # ----------------------
    envFrom:
      - configMapRef:
          name: ravens-django-config{{ serviceNameSuffix}}
      - configMapRef:
          name: ravens-config-d3m{{ serviceNameSuffix}}
    env:
      - name: D3MRUN
        value: "ta2"
      #- name: AM_ENV
      #  value: "DEBUG"
  # -------------------------
  # 2 of 7: Ravens nginx
  # -------------------------
  - name: ravens-nginx
    image: {{ tworavens_registry }}/ravens-nginx:{{ tworavens_container_tag }}
    imagePullPolicy: {{ pull_policy_nginx }}
    resources:
      requests:
         memory: 256Mi
         cpu: 500m
      limits:
         memory: 500Mi
         cpu: 500m
    ports:
      - containerPort: 80
        name: http
        protocol: TCP
    envFrom:
      - configMapRef:
          name: ravens-django-config{{ serviceNameSuffix}}
    volumeMounts:
      # ----------------------------------
      # shared between containers
      # ----------------------------------
      - mountPath: "/ravens_volume"
        name: "ravens-volume"
        readOnly: false
      # ----------------------
      # D3M config volume mounts
      # ----------------------
      - name: input-data
        mountPath: /input
        readOnly: true
      - name: output-data
        mountPath: /output
        readOnly: false
      - name: static-data
        mountPath: /static
        readOnly: true
      # ----------------------
      # END: D3M config volume mounts
      # ----------------------
  # -------------------------
  # 3 of 7: redis
  # -------------------------
  - name: redis
    image: redis:4.0
    resources:
      requests:
         memory: 500Mi
         cpu: 500m
      limits:
         memory: 1000Mi
         cpu: 500m
    ports:
    - containerPort: 6379
  # -------------------------
  # 4 of 7: TA3 main (web app)
  # -------------------------
  - name: ta3-main
    image: {{ tworavens_registry }}/ravens-main:{{ tworavens_container_tag }}
    #image: tworavens/ravens-main:develop
    imagePullPolicy: {{ pull_policy_ravens_main }}
    command: ["d3m_start_multiuser.sh"]
    resources:
      requests:
         memory: 1000Mi
         cpu: 1000m
      limits:
         memory: 3000Mi
         cpu: 1500m
    ports:
      - containerPort: 8080
        name: http
        protocol: TCP
    volumeMounts:
      # ----------------------------------
      # shared between containers
      # ----------------------------------
      - mountPath: "/ravens_volume"
        name: "ravens-volume"
        readOnly: false
      # ----------------------
      # D3M config volume mounts
      # ----------------------
      - name: input-data
        mountPath: /input
        readOnly: true
      - name: output-data
        mountPath: /output
        readOnly: false
      - name: static-data
        mountPath: /static
        readOnly: true
      # ----------------------
      # END: D3M config volume mounts
      # ----------------------
    envFrom:
      - configMapRef:
          name: ravens-django-config{{ serviceNameSuffix}}
      - configMapRef:
          name: ravens-config-d3m{{ serviceNameSuffix}}
    env:
      - name: SECRET_KEY
        valueFrom:
          secretKeyRef:
            name: tworavens-web-secrets
            key: SECRET_KEY
      - name: MONGO_CONNECTION_STRING
        value: "mongodb://localhost:27017"
      #- name: MONGO_CONNECTION_STRING
      #  valueFrom:
      #    secretKeyRef:
      #      name: tworavens-web-secrets
      #      key: MONGO_CONNECTION_STRING
      - name: D3MCPU
        value: "1"
      - name: D3MRAM
        value: "1Gi"
      - name: GCE_CREDS_INFO
        valueFrom:
          secretKeyRef:
            name: gce-creds-variable
            key: GCE_CREDS_INFO
    # ----------------------------------
    # livenessProbe: restart if this is failing
    # ----------------------------------
    #livenessProbe:
    #  httpGet:
    #    path: /monitoring/alive
    #    port: 8080
    #  initialDelaySeconds: 60
    #  timeoutSeconds: 10
    #  periodSeconds: 10
    #  failureThreshold: 3
    # ----------------------------------
    # readinessProbe: ready for traffic
    #   note: after container start, takes about 30 sec to init db, configs, etc
    # ----------------------------------
    #readinessProbe:
    #  httpGet:
    #    path: /monitoring/alive
    #    port: 8080
    #  initialDelaySeconds: 50
    #  periodSeconds: 20
  # -------------------------
  # 5 of 7: celery worker
  # -------------------------
  - name: celery-worker
    image: {{ tworavens_registry }}/ravens-main:{{ tworavens_container_tag }}
    imagePullPolicy: {{ pull_policy_ravens_main }}
    command: ['celery', '-A', 'tworavensproject', 'worker', '-l', 'info']
    # command: ['celery', '-A', 'tworavensproject', 'worker', '--concurrency=7', '-l', 'info']
    resources:
        requests:
           memory: 9000Mi
           cpu: 6000m
        limits:
           memory: 12000Mi
           cpu: 7000m
    ports:
      - containerPort: 8080
        name: http
        protocol: TCP
    volumeMounts:
      # ----------------------------------
      # shared between containers
      # ----------------------------------
      - mountPath: "/ravens_volume"
        name: "ravens-volume"
        readOnly: false
      # ----------------------
      # D3M config volume mounts
      # ----------------------
      - name: input-data
        mountPath: /input
        readOnly: true
      - name: output-data
        mountPath: /output
        readOnly: false
      - name: static-data
        mountPath: /static
        readOnly: true
      # ----------------------
      # END: D3M config volume mounts
      # ----------------------
    # ---------------------------------
    # environment variables passed to container
    # ---------------------------------
    envFrom:
      - configMapRef:
          name: ravens-django-config{{ serviceNameSuffix}}
      - configMapRef:
          name: ravens-config-d3m{{ serviceNameSuffix}}
    env:
      - name: MONGO_CONNECTION_STRING
        value: "mongodb://localhost:27017"
      - name: SECRET_KEY
        valueFrom:
          secretKeyRef:
            name: tworavens-web-secrets
            key: SECRET_KEY
      #- name: MONGO_CONNECTION_STRING
      #  valueFrom:
      #    secretKeyRef:
      #      name: tworavens-web-secrets
      #      key: MONGO_CONNECTION_STRING
  # -------------------------
  # 6 of 7: mongo
  # -------------------------
  - name: mongo-2ravens
    image: mongo
    resources:
      requests:
         memory: 1000Mi
         cpu: 500m
      limits:
         memory: 2000Mi
         cpu: 1000m
    ports:
      - containerPort: 27017
        protocol: TCP
    volumeMounts:
      # ----------------------------------
      # shared between TwoRavens and rook
      # - has some test data if needed
      # ----------------------------------
      - name: "ravens-volume"
        mountPath: "/ravens_volume"
        readOnly: false
      #- name: "ravens-volume"
      #  #mountPath: /data/db
      #  readOnly: false
  # -------------------------
  # 7 of 7: rook
  # -------------------------
  - name: rook-service
    image: {{ tworavens_registry }}/ravens-r-service:{{ tworavens_container_tag }}
    imagePullPolicy: {{ pull_policy_rook }}
{{ rook_resources }}
    resources:
      requests:
         memory: 1000Mi
         cpu: 1000m
      limits:
         memory: 2000Mi
         cpu: 1000m
    volumeMounts:
      # ----------------------------------
      # shared between containers
      # ----------------------------------
      - mountPath: "/ravens_volume"
        name: "ravens-volume"
        readOnly: false
      # ----------------------
      # D3M config volume mounts
      # ----------------------
      - name: input-data
        mountPath: /input
        readOnly: true
      - name: output-data
        mountPath: /output
        readOnly: false
      - name: static-data
        mountPath: /static
        readOnly: true
      # ----------------------
      # END: D3M config volume mounts
      # ----------------------
    ports:
      - containerPort: 8000
        name: http
        protocol: TCP
    envFrom:
      - configMapRef:
          name: ravens-django-config{{ serviceNameSuffix}}
      - configMapRef:
          name: ravens-config-d3m{{ serviceNameSuffix}}
    # ----------------------------------
    # livenessProbe: restart if this is failing
    # ----------------------------------
    #livenessProbe:
    #  httpGet:
    #    path: /rook-custom/healthcheckapp
    #    port: 8000
    #  initialDelaySeconds: 30
    #  timeoutSeconds: 60
    #  periodSeconds: 10
    #  failureThreshold: 5 # rook is messy, this is pre going to flask
    # ----------------------------------
    # readinessProbe: ready for traffic
    #   note: after container start, takes about 20 sec to init
    # ----------------------------------
    #readinessProbe:
    #  httpGet:
    #    path: /rook-custom/healthcheckapp
    #    port: 8000
    #  initialDelaySeconds: 30
    #  periodSeconds: 50
  # ----------------------------
  # Volumes
  # ----------------------------
  volumes:
    - name: ravens-volume
      emptyDir: {}
    # ----------------------------
    # Volumes for jump server data
    # ----------------------------
    - name: input-data
      emptyDir: {}
      #hostPath:
        #path: {{ eval_dataset_path }}
        #type: Directory
    - name: static-data
      emptyDir: {}
      #hostPath:
        #path: {{ static_dataset_path }}
        #type: Directory
    - name: output-data
      emptyDir: {}
      #persistentVolumeClaim:
        #claimName: eval-output-pv-claim
---
# ---------------------------------------
# TA3 configmap used by:
#   main (TA3), rook-service, celery-worker,
# ---------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: ravens-django-config{{ serviceNameSuffix}}
data:
  DJANGO_SETTINGS_MODULE: "tworavensproject.settings.gce_settings"
  LOCAL_SETUP_DIR: /ravens_volume/2ravens_local_setup
  #
  RAVENS_SERVER_NAME: "{{ RAVENS_SERVER_NAME}}"
  SESSION_COOKIE_NAME: "{{ SESSION_COOKIE_NAME}}"
  CSRF_COOKIE_NAME: "{{ CSRF_COOKIE_NAME}}"
  # When TA2_STATIC_TEST_MODE is set to True, TA2 is ignored
  TA2_STATIC_TEST_MODE: "False"
  #
  DEBUG: "False"
  DISPLAY_DATAMART_UI: "False"
  #
  # Reference to the gRPC server using the pod name and TA2 port
  TA2_TEST_SERVER_URL: "tworavensweb{{ serviceNameSuffix}}:45042"
  #
  # Url to TA3 R/rook web service
  R_DEV_SERVER_BASE: "http://localhost:8000/"
  #
  # Redis
  REDIS_HOST: localhost
  #
  # valid values: "ws://" and  "wss://"
  WEBSOCKET_PREFIX: "ws://"
  #
  # Mongo db name; Mongo creds are in secrets
  TWORAVENS_MONGO_DB_NAME: "harvard"
  #
  # Only used by rook--and redundant as also set to "yes" in Dockerfile
  ROOK_USE_PRODUCTION_MODE: "yes"
  #
  # ----------------------------------
  # GCE SQL db
  # ----------------------------------
  DB_HOST: "127.0.0.1"
  DB_PORT: "3306"
  DB_NAME: "d3m_gce_ravendb"
  # username and password secrets attached to container
---
# ---------------------------------------
# D3M Configmap used by:
#   ravens-main (TA3), rook-service, celery-worker, TA2
# ---------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  name: ravens-config-d3m{{ serviceNameSuffix}}
data:
  D3MRUN: "{{ D3MRUN }}"
  D3MINPUTDIR: "{{ D3MINPUTDIR }}"
  D3MOUTPUTDIR: "{{ D3MOUTPUTDIR }}"
  D3MSTATICDIR: "{{ D3MSTATICDIR }}"
  D3MPROBLEMPATH: "{{ D3MPROBLEMPATH }}"
  D3MLOCALDIR: "{{ D3MLOCALDIR }}"
  # Used by TA2
  #D3MCPU: "{{ D3MCPU }}"
  #D3MRAM: "{{ D3MRAM }}"
  #
  D3MTIMEOUT: "600"
  D3MCONTEXT: "TESTING"
  #
  DATAMART_URL_NYU: "{{ DATAMART_URL_NYU }}"
  DATAMART_URL_ISI: "{{ DATAMART_URL_ISI }}"
---
