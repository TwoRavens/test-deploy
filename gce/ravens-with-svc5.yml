---
#
apiVersion: v1
kind: Service
metadata:
  labels:
    kubernetes.io/cluster-service: 'true'
    kubernetes.io/name: monitoring-raven
  name: raven-web-service
spec:
  type: LoadBalancer
  loadBalancerIP: 104.197.235.238  # 2ravens.org
  selector:
    app: tworavens
  ports:
    - name: http
      port: 80
      targetPort: 80
---
apiVersion: v1
kind: Pod
metadata:
  name: tworavensweb
  labels:
    app: tworavens
spec:
  restartPolicy: Always
  volumes:
    - name: ravens-volume
      emptyDir: {}
  containers:
  # -------------------------
  # 1 of 6: Ravens nginx
  # -------------------------
  - name: ravens-nginx
    image: tworavens/ravens-nginx:latest
    imagePullPolicy: Always
    #resources:
    #  requests:
    #    memory: 256Mi
    #    cpu: 1
    ports:
      - containerPort: 80
        name: http
        protocol: TCP
    # ----------------------------------
    # shared between TwoRavens and rook
    # - also has static files to serve
    # ----------------------------------
    volumeMounts:
    - name: ravens-volume
      mountPath: /ravens_volume
      readOnly: false
  # -------------------------
  # 2 of 6: redis
  # -------------------------
  - name: redis
    image: redis:4.0
    #resources:
    #  requests:
    #    memory: 100Mi
    #    cpu: 1
    ports:
    - containerPort: 6379
  # -------------------------
  # 3 of 6: TA3 main (web app)
  # -------------------------
  - name: ta3-main
    image: tworavens/ravens-main:latest
    #image: tworavens/ravens-main:dm-demo3
    imagePullPolicy: Always
    command: ["d3m_start.sh"]
    #resources:
    #  requests:
    #    memory: 512Mi
    #    cpu: 1
    ports:
      - containerPort: 8080
        name: http
        protocol: TCP
    volumeMounts:
      # ----------------------------------
      # shared between TwoRavens and rook
      # - has some test data if needed
      # ----------------------------------
      - name: ravens-volume
        mountPath: /ravens_volume
        readOnly: false
    # environment variables passed to container
    env:
      - name: SECRET_KEY
        valueFrom:
          secretKeyRef:
            name: tworavens-web-secrets
            key: SECRET_KEY
      - name: MONGO_CONNECTION_STRING
        valueFrom:
          secretKeyRef:
            name: tworavens-web-secrets
            key: MONGO_CONNECTION_STRING
    envFrom:
      - configMapRef:
          name: ravens-django-config
      - configMapRef:
          name: ravens-d3m-config
    # ----------------------------------
    # livenessProbe: restart if this is failing
    # ----------------------------------
    livenessProbe:
      httpGet:
        path: /monitoring/alive
        port: 8080
      initialDelaySeconds: 15
      timeoutSeconds: 1
      periodSeconds: 10
      failureThreshold: 3
    # ----------------------------------
    # readinessProbe: ready for traffic
    # ----------------------------------
    readinessProbe:
      httpGet:
        path: /monitoring/alive
        port: 8080
      initialDelaySeconds: 10
      periodSeconds: 10
  # -------------------------
  # 4 of 6: celery worker
  # -------------------------
  - name: celery-worker
    image: tworavens/ravens-main:latest
    #image: tworavens/ravens-main:develop
    imagePullPolicy: Always
    command: ['celery', '-A', 'tworavensproject', 'worker', '-l', 'info', '--concurrency', '4']
    #resources:
    #  requests:
    #    memory: 512Mi
    #    cpu: 1
    ports:
      - containerPort: 8080
        name: http
        protocol: TCP
    volumeMounts:
      # ----------------------------------
      # shared between TwoRavens and rook
      # - has some test data if needed
      # ----------------------------------
      - name: ravens-volume
        mountPath: /ravens_volume
        readOnly: false
    # --------------------------------------------
    # environment variables passed to container
    # --------------------------------------------
    env:
      - name: SECRET_KEY
        valueFrom:
          secretKeyRef:
            name: tworavens-web-secrets
            key: SECRET_KEY
      - name: MONGO_CONNECTION_STRING
        valueFrom:
          secretKeyRef:
            name: tworavens-web-secrets
            key: MONGO_CONNECTION_STRING
    envFrom:
      - configMapRef:
          name: ravens-django-config
      - configMapRef:
          name: ravens-d3m-config
  # -------------------------
  # 5 of 6: rook
  # -------------------------
  - name: rook-service
    image: tworavens/ravens-r-service:latest
    # image: tworavens/ravens-r-service:develop
    imagePullPolicy: Always
    #resources:
    #  requests:
    #    memory: 512Mi
    #    cpu: 1
    volumeMounts:
      # ----------------------------------
      # ravens volume shared w/ ta3-main
      # ----------------------------------
      - mountPath: /ravens_volume
        name: ravens-volume
        readOnly: false
    ports:
      - containerPort: 8000
        name: http
        protocol: TCP
    env:
      # ----------------------------------
      # Also set to "yes" in the Dockerfile
      # ----------------------------------
      - name: ROOK_USE_PRODUCTION_MODE
        value: "yes"
    envFrom:
      - configMapRef:
          name: ravens-d3m-config
    # ----------------------------------
    # livenessProbe: restart if this is failing
    # ----------------------------------
    livenessProbe:
      httpGet:
        path: /custom/healthcheckapp
        port: 8000
      initialDelaySeconds: 15
      timeoutSeconds: 1
      periodSeconds: 20
      failureThreshold: 3
    # ----------------------------------
    # readinessProbe: ready for traffic
    # ----------------------------------
    readinessProbe:
      httpGet:
        path: /custom/healthcheckapp
        port: 8000
      initialDelaySeconds: 10
      periodSeconds: 10
  # -------------------------
  # 6 of 6: TA2 main
  # -------------------------
  - name: ta2-main
    # image: tworavens/ta2-isi:dm-demo
    image: gcr.io/raven2-186120/isi-ta2:winter-2019
    resources:
      requests:
        memory: 512Mi
        #cpu: 1
    ports:
      - containerPort: 45042
        protocol: TCP
    volumeMounts:
      # ----------------------------------
      # shared between TwoRavens and rook
      # - has some test data if needed
      # ----------------------------------
      - name: ravens-volume
        mountPath: /ravens_volume
        readOnly: false
    env:
      # ----------------------------------
      # D3M summer eval variables
      # ref: https://goo.gl/L1J9i5
      # ----------------------------------
      - name: D3MPORT
        value: "45042"
    envFrom:
      - configMapRef:
          name: ravens-d3m-config
