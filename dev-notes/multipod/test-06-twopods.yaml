---
#  PersistentVolume with underlying Cloud Filestore
#  - reference: https://cloud.google.com/filestore/docs/accessing-fileshares#create_a_persistent_volume
#
apiVersion: v1
kind: PersistentVolume
metadata:
  name: raven-pv-1
spec:
  # storageClassName: "twopod-raven-pv-1"
  capacity:
    storage: 10Gi
  accessModes:
  - ReadWriteMany
  nfs:
    path: /raven_share_01
    server: 10.239.9.130
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: raven-pvc-1
spec:
  #storageClassName: "twopod-raven-pv-1"
  accessModes:
  - ReadWriteMany
  storageClassName: ""
  volumeName: raven-pv-1
  resources:
    requests:
      storage: 10Gi
---
# --------------------------------
# Service for Pod 1
# --------------------------------
apiVersion: v1
kind: Service
metadata:
  name: twopod-service
  labels:
    app: twopod-web-service
    kubernetes.io/cluster-service: 'true'
    kubernetes.io/name: monitoring-raven
spec:
  type: LoadBalancer
  # loadBalancerIP: 104.197.235.238
  #  loadBalancerIP: 104.197.235.238  # 2ravens.org
  selector:
    app: twopod-pod
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 80
    - name: http-hello
      port: 8080
      protocol: TCP
      targetPort: 8080
---
# ------------------------------
# Pod 1
# ------------------------------
apiVersion: v1
kind: Pod
metadata:
  name: twopod
  labels:
    app: twopod-pod
spec:
  restartPolicy: Never
  containers:
  # -------------------------
  # 1 of 1: nginx
  # -------------------------
  - name: twopod-nginx
    image: nginx
    imagePullPolicy: IfNotPresent
    ports:
      - name: http
        containerPort: 80
        protocol: TCP
    envFrom:
      - configMapRef:
          name: twopod-config
    volumeMounts:
      - name: output-data
        mountPath: /output
        #subPath: twopad
        readOnly: false
  # -------------------------
  # 2 of 2: python
  # -------------------------
  - name: twopod-python
    #image: hello-python:latest
    image: rprasad7/hello-python:test
    imagePullPolicy: Always
    ports:
      - name: http-hello
        containerPort: 8080
        protocol: TCP
    envFrom:
      - configMapRef:
          name: twopod-config
    volumeMounts:
      - name: output-data
        mountPath: /output
        subPath: twopad
        readOnly: false
  # ----------------------------
  # Volumes
  # ----------------------------
  volumes:
    - name: output-data
      #emptyDir: {}
      persistentVolumeClaim:
        claimName: raven-pvc-1
        readOnly: false
---
# --------------------------------
# Service for Pod 2
# --------------------------------
apiVersion: v1
kind: Service
metadata:
  name: twopod-service-2
  labels:
    app: twopod-web-service2
    kubernetes.io/cluster-service: 'true'
    kubernetes.io/name: monitoring-raven
spec:
  type: LoadBalancer
  # loadBalancerIP: 104.197.235.238
  #  loadBalancerIP: 104.197.235.238  # 2ravens.org
  selector:
    app: twopod2-pod
  ports:
    - name: http-hello
      port: 8080
      protocol: TCP
      targetPort: 8080
---
# ------------------------------
# Pod 2
# ------------------------------
apiVersion: v1
kind: Pod
metadata:
  name: twopod2
  labels:
    app: twopod2-pod
spec:
  restartPolicy: Never
  containers:
  # -------------------------
  # 1 of 1: python
  # -------------------------
  - name: twopod2-python
    #image: hello-python:latest
    image: rprasad7/hello-python:test
    imagePullPolicy: IfNotPresent
    envFrom:
      - configMapRef:
          name: twopod-config
    volumeMounts:
      - name: output-data
        mountPath: /output
        subPath: twopad
        readOnly: false
  # ----------------------------
  # Volumes
  # ----------------------------
  volumes:
    - name: output-data
      #emptyDir: {}
      persistentVolumeClaim:
        claimName: raven-pvc-1
        readOnly: false
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: twopod-config
data:
  D3MINPUTDIR: "/ravens_volume/test_data"
  D3MOUTPUTDIR: "/ravens_volume/test_output"
---
